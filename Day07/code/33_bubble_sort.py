"""
버블 정렬 알고리즘 [오름차순]

가장 좌측 인덱스부터 비교를 시작. 자신의 바로 옆 우측 요소와 비교.
자신의 우측 요소가 더 작을 경우 교체 (큰 값을 우측으로 밀어냄)
1회전이 끝났을 때 요소 중 가장 큰 값이 우측 끝에 위치하게 됨.

2회전도 가장 좌측 인덱스부터 비교를 시작 그러나 현재 요소 중 최대값이
맨 우측에 위치하므로 맨 우측 요소는 비교에서 제외
2회전이 끝났을 때, 우측 두 개의 요소는 정렬 된 상태.

원본: [9, 4, 5, 7, 2]

i = 0 , j = 0,  [j] , [j+1] 비교    [9, 4] 교체     [4, 9, 5, 7, 2]
        j = 1,  [j] , [j+1] 비교    [9, 5] 교체     [4, 5, 9, 7, 2]
        j = 2,  [j] , [j+1] 비교    [9, 7] 교체     [4, 5, 7, 9, 2]
        j = 3,  [j] , [j+1] 비교    [9, 2] 교체     [4, 5, 7, 2, 9]
[1회전 끝. 요소 중 최대값이 가장 우측에 위치]

i = 1 , j = 0,  [j] , [j+1] 비교    [4, 5] 유지     [4, 5, 7, 2, 9]
        j = 1,  [j] , [j+1] 비교    [5, 7] 유지     [4, 5, 7, 2, 9]
        j = 2,  [j] , [j+1] 비교    [7, 2] 교체     [4, 5, 2, 7, 9]
[2회전 끝. 우측 두 개의 요소는 정렬이 완료된 상태]

i = 2 , j = 0,  [j] , [j+1] 비교    [4, 5] 유지     [4, 5, 2, 7, 9]
        j = 1,  [j] , [j+1] 비교    [5, 2] 교체     [4, 2, 5, 7, 9]
[3회전 끝. 우측 세 개의 요소는 정렬이 완료된 상태]

i = 3 , j = 0,  [j] , [j+1] 비교    [4, 2] 교체     [2, 4, 5, 7, 9]
[4회전 끝. 정렬이 완료된 상태.]
"""


def bubble_sort(num_list):
    for i in range(len(num_list) - 1):
        for j in range(len(num_list) - 1):
            if num_list[j] > num_list[j + 1]:
                num_list[j], num_list[j + 1] = num_list[j + 1], num_list[j]


if __name__ == "__main__":
    def main():
        numbers = [9, 4, 5, 7, 2]
        bubble_sort(numbers)
        print(f"최종 결과 = {numbers}")


    main()
